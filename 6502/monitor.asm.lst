#### Labels
DoExec           = 0xFF7D
DoHello          = 0xFF26
DoLoad           = 0xFF4D
DoRead           = 0xFF2E
DoWrite          = 0xFF3B
InitHardware     = 0xFF8E
ReadByte         = 0xFF97
ReadWord         = 0xFF83
WriteByte        = 0xFF9F
load             = 0xFF5B
load2            = 0xFF68
load3            = 0xFF75
main             = 0xFF0B
readu1           = 0xFF97
top              = 0xFF00
writeu1          = 0xFFA0

#### Defines
ERROR            = 0x0066
HELLO            = 0x00A5
OK               = 0x0088
POWER            = 0x00A4
RIOT_A_DATA      = 0x0280
RIOT_A_DDR       = 0x0281
RIOT_B_DATA      = 0x0282
RIOT_B_DDR       = 0x0283
RIOT_RAM         = 0x0080
RIOT_RO_TIMER    = 0x0284
RIOT_WO_T1       = 0x0294
RIOT_WO_T1024    = 0x0297
RIOT_WO_T64      = 0x0296
RIOT_WO_T8       = 0x0295
SELECT_IO        = 0x0000
SELECT_RAM       = 0x8000
SELECT_ROM       = 0xC000
SELECT_SPARE     = 0x4000
TMP1             = 0x0082
TMP2             = 0x0084
TMP3             = 0x0086
UART_CTL         = 0x0000
UART_DATA        = 0x0001
VECTOR_IRQ       = 0xFFFE
VECTOR_NMI       = 0xFFFA
VECTOR_RESET     = 0xFFFC
_CPU             = 6502

                  ._CPU = 6502
                  
                  .UART_CTL     = 0x0000
                  .UART_DATA    = 0x0001
                  
                  .RIOT_RAM      = 0x0080 ; 80-FF, 128 bytes. Mirrored 180-1FF for stack.
                  
                  .RIOT_A_DATA   = 0x0280
                  .RIOT_A_DDR    = 0x0281
                  .RIOT_B_DATA   = 0x0282
                  .RIOT_B_DDR    = 0x0283
                  .RIOT_RO_TIMER = 0x0284
                  .RIOT_WO_T1    = 0x0294
                  .RIOT_WO_T8    = 0x0295
                  .RIOT_WO_T64   = 0x0296
                  .RIOT_WO_T1024 = 0x0297
                  
                  .SELECT_IO     = 0x0000
                  .SELECT_SPARE  = 0x4000
                  .SELECT_RAM    = 0x8000
                  .SELECT_ROM    = 0xC000
                  
                  .VECTOR_NMI   = 0xFFFA
                  .VECTOR_RESET = 0xFFFC
                  .VECTOR_IRQ   = 0xFFFE
                  
                  ; Address decode
                  ;
                  ;11_xxxxxx_xxxxxxxx ROM 16K
                  ;10_xxxxxx_xxxxxxxx RAM 16K
                  ;
                  ;01_00xxxx_xxxxxxxx Spare 0 4K
                  ;01_01xxxx_xxxxxxxx Spare 1 4K
                  ;01_10xxxx_xxxxxxxx Spare 2 4K
                  ;01_11xxxx_xxxxxxxx Spare 3 4K
                  ;
                  ;00_xxxxxx_xxxxxxxx I/O (see below)
                  ;
                  ;00_xxxxxx0xxxxxx0 UART Control/Status
                  ;00_xxxxxx0xxxxxx1 UART Transmit/Receive
                  ;
                  ;00_xxxx0x1xxxxxxx RAM (128 bytes)
                  ;
                  ;00_xxxx1x__1xxxx000 Data A
                  ;00_xxxx1x__1xxxx001 DDRA
                  ;00_xxxx1x__1xxxx010 Data B
                  ;00_xxxx1x__1xxxx011 DDRB
                  ;
                  ;00_xxxx1x1xx0x1bc (write) edge detect control
                  ;00_xxxx1x1xxxa1x0 (read) timer
                  ;00_xxxx1x1xxxx1x1 (read) interrupt flags
                  ;00_xxxx1x1xx1a100 (write) div 1T
                  ;00_xxxx1x1xx1a101 (write) div 8T
                  ;00_xxxx1x1xx1a110 (write) div 64T
                  ;00_xxxx1x1xx1a111 (write) div 1024T
                  
                  .HELLO = 0xA5  ; Startup value (we are alive)
                  .POWER = 0xA4  ; Power on value
                  .ERROR = 0x66  ; Invalid command
                  .OK    = 0x88  ; OK (write and load)
                  
                  .TMP1  = 0x82  ; Used to combine 2 nibbles into a byte
                  .TMP2  = 0x84  ; Used to combine two bytes into a word
                  .TMP3  = 0x86  ; Used to fill memory
                  
                  0xFF00:
                  top:
                  
FF00: A2 FF            LDX    #0xFF            ; Set stack to ...
FF02: 9A               TXS                     ; ... 01FF (builds to lower memory)
                  
FF03: 20 8E FF         JSR    InitHardware     ; RIOT or UART
                  
FF06: A9 A4            LDA    #POWER           ; Initial "hello" ...
FF08: 20 9F FF         JSR    WriteByte        ; ... value
                  
                  main:
FF0B: 20 97 FF         JSR    ReadByte         ; Get the command byte
FF0E: AA               TAX                     ; A to X so we can DEC
                  
FF0F: CA               DEX                     ; 1 = ...
FF10: F0 1C            BEQ    DoRead           ; ... read byte
FF12: CA               DEX                     ; 2 = ...
FF13: F0 26            BEQ    DoWrite          ; ... do write
FF15: CA               DEX                     ; 3 = ...
FF16: F0 35            BEQ    DoLoad           ; ... multi-byte write (load)
FF18: CA               DEX                     ; 4 = ...
FF19: F0 62            BEQ    DoExec           ; ... execute
FF1B: CA               DEX                     ; 5 = ...
FF1C: F0 08            BEQ    DoHello          ; ... send back the "hello" value
                  
FF1E: A9 66            LDA    #ERROR           ; Return ...
FF20: 20 9F FF         JSR    WriteByte        ; ... error value
                  
FF23: 4C 0B FF         JMP    main             ; Back to top of loop
                  
                  DoHello:
FF26: A9 A5            LDA    #HELLO           ; Send the ...
FF28: 20 9F FF         JSR    WriteByte        ; ... hello value
FF2B: 4C 0B FF         JMP    main             ; Back to the main loop
                  
                  ; 01 AA AA -> memory[AAAA]
                  DoRead:
FF2E: 20 83 FF         JSR    ReadWord         ; Get the address
FF31: A0 00            LDY    #0
FF33: B1 84            LDA    (TMP2),Y         ; Read desired memory address
FF35: 20 9F FF         JSR    WriteByte        ; Output the value
FF38: 4C 0B FF         JMP    main             ; Back to main loop
                  
                  ; 02 AA AA VV -> OK
                  DoWrite:
FF3B: 20 83 FF         JSR    ReadWord         ; Read the address
FF3E: 20 97 FF         JSR    ReadByte         ; Value
FF41: A0 00            LDY    #0
FF43: 91 84            STA    (TMP2),Y         ; Write desired memory address
FF45: A9 88            LDA    #OK              ; Output ...
FF47: 20 9F FF         JSR    WriteByte        ; ... OK
FF4A: 4C 0B FF         JMP    main             ; Back to the main loop
                  
                  ; 03 AA AA LL LL vv vv ... -> OK
                  DoLoad:
FF4D: 20 83 FF         JSR    ReadWord         ; Read the address
FF50: A5 84            LDA    TMP2             ; Copy ...
FF52: 85 86            STA    TMP3             ; ... address ...
FF54: A5 85            LDA    TMP2+1           ; ... to ...
FF56: 85 87            STA    TMP3+1           ; ... TMP3
FF58: 20 83 FF         JSR    ReadWord         ; Read the length to TMP2
                  
                  load:
FF5B: 20 97 FF         JSR    ReadByte         ; Read the next byte
FF5E: A0 00            LDY    #0
FF60: 91 86            STA    (TMP3),Y         ; Copy it to memory
                  
FF62: E6 86            INC    TMP3             ; Bump ...
FF64: D0 02            BNE    load2            ; ... the pointer ...
FF66: E6 87            INC    TMP3+1           ; ... to memory
                  
                  load2:
FF68: C6 84            DEC    TMP2             ; Decrement the count LSB
FF6A: D0 EF            BNE    load             ; More to load ... loop back for more
FF6C: A5 85            LDA    TMP2+1           ; Anything to borrow?
FF6E: F0 05            BEQ    load3            ; No? We are done
FF70: C6 85            DEC    TMP2+1           ; Borrow from MSB
FF72: 4C 5B FF         JMP    load             ; Do all bytes
                  
                  load3:
FF75: A9 88            LDA    #OK              ; Output ...
FF77: 20 9F FF         JSR    WriteByte        ; ... OK
FF7A: 4C 0B FF         JMP    main             ; Back to the main loop
                  
                  ; 04 AA AA
                  DoExec:
FF7D: 20 83 FF         JSR    ReadWord         ; Get the destination
FF80: 6C 84 00         JMP    (TMP2)           ; Jump to it
                  
                  ReadWord:
FF83: 20 97 FF         JSR    ReadByte         ; Get the ...
FF86: 85 85            STA    TMP2+1           ; ... MSB (6502 is little endian)
FF88: 20 97 FF         JSR    ReadByte         ; Get the ...
FF8B: 85 84            STA    TMP2             ; ... LSB
FF8D: 60               RTS                     ; Done
                  
                  ; --------------------------
                  ; RIOT specific
                  ; --------------------------
                  
                  ;InitHardware:
                  ;	LDA    #0               ; Set port A ...
                  ;    STA    RIOT_A_DDR       ; ... to all inputs
                  ;    LDA    #0xFF            ; Set port A ...
                  ;    STA    RIOT_B_DDR       ; ... to all outputs
                  ;    RTS                     ; Done
                  ;
                  ;WriteByte:
                  ;    STA    RIOT_B_DATA      ; Simple for the PIA
                  ;    RTS                     ; Done
                  ;
                  ;ReadByte:
                  ;    LDA    #0               ; Start with ...
                  ;    STA    TMP1             ; ... zeros
                  ;    LDX    #2               ; 2 nibbles to read
                  ;
                  ;wait1:
                  ;    LDA    RIOT_A_DATA      ; Read the input port
                  ;    AND    #0x80            ; Only the upper bit (the clock)
                  ;    BNE    wait1            ; Wait for clock to go low
                  ;
                  ;    ASL    TMP1             ; Shift ...
                  ;    ASL    TMP1             ; ... over ...
                  ;    ASL    TMP1             ; ... last ...
                  ;    ASL    TMP1             ; ... nibble
                  ;
                  ;    LDA    RIOT_A_DATA      ; Read the input port
                  ;    AND    #0x0F            ; Just the data bits
                  ;    ORA    TMP1             ; OR it into ...
                  ;    STA    TMP1             ; ... the result
                  ;
                  ;wait2:
                  ;    LDA    RIOT_A_DATA      ; Read input port
                  ;    AND    #0x80            ; Wait for clock to ...
                  ;    BEQ    wait2            ; ... go high
                  ;
                  ;    DEX                     ; Both nibbles loaded?
                  ;    BNE    wait1            ; No ... do them both
                  ;
                  ;    LDA    TMP1             ; Return the result
                  ;    STA    RIOT_B_DATA      ; Echo back (for development)
                  ;
                  ;    RTS
                  
                  ; --------------------------
                  ; UART specific
                  ; --------------------------
                  
                  InitHardware:
                  
FF8E: A9 03            LDA    #0x03            ; Master ...
FF90: 85 00            STA    UART_CTL         ; ... reset
FF92: A9 16            LDA    #0x16            ; 8N1, div64
FF94: 85 00            STA    UART_CTL         ; Configure UART
FF96: 60               RTS                     ; Done
                  
                  ReadByte:
                  readu1:
FF97: A5 00            LDA    UART_CTL         ; Wait ...
FF99: 4A               LSR    A                ; ... for ...
FF9A: 90 FB            BCC    readu1           ; ... data
FF9C: A5 01            LDA    UART_DATA        ; Get the character
FF9E: 60               RTS                     ; Done
                  
                  WriteByte:
FF9F: AA               TAX                     ; Hold outgoing value
                  writeu1:
FFA0: A5 00            LDA    UART_CTL         ; Buffer ...
FFA2: 4A               LSR    A                ; ... is ...
FFA3: 4A               LSR    A                ; ... full?
FFA4: 90 FA            BCC    writeu1          ; Yes ... wait
FFA6: 8A               TXA                     ; Restore outgoing value
FFA7: 85 01            STA    UART_DATA        ; Send the data
FFA9: 60               RTS                     ; Done
                  
                  0xFFFA:
FFFA: 00 FF            .word top    ; NMI
FFFC: 00 FF            .word top    ; RESET
FFFE: 00 FF            .word top    ; IRQ
